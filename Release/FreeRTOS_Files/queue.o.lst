   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,4
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "queue.c"
  14              	 .section .text.unlikely.prvCopyDataToQueue,"ax",%progbits
  15              	 .align 1
  16              	 .code 16
  17              	 .thumb_func
  19              	prvCopyDataToQueue:
  20 0000 70B5     	 push {r4,r5,r6,lr}
  21 0002 161C     	 mov r6,r2
  22 0004 026C     	 ldr r2,[r0,#64]
  23 0006 041C     	 mov r4,r0
  24 0008 856B     	 ldr r5,[r0,#56]
  25 000a 002A     	 cmp r2,#0
  26 000c 08D1     	 bne .L2
  27 000e 0668     	 ldr r6,[r0]
  28 0010 101C     	 mov r0,r2
  29 0012 002E     	 cmp r6,#0
  30 0014 29D1     	 bne .L3
  31 0016 6068     	 ldr r0,[r4,#4]
  32 0018 FFF7FEFF 	 bl xTaskPriorityDisinherit
  33 001c 6660     	 str r6,[r4,#4]
  34 001e 24E0     	 b .L3
  35              	.L2:
  36 0020 002E     	 cmp r6,#0
  37 0022 0DD1     	 bne .L4
  38 0024 8068     	 ldr r0,[r0,#8]
  39 0026 FFF7FEFF 	 bl memcpy
  40 002a A368     	 ldr r3,[r4,#8]
  41 002c 226C     	 ldr r2,[r4,#64]
  42 002e 301C     	 mov r0,r6
  43 0030 9B18     	 add r3,r3,r2
  44 0032 6268     	 ldr r2,[r4,#4]
  45 0034 A360     	 str r3,[r4,#8]
  46 0036 9342     	 cmp r3,r2
  47 0038 17D3     	 bcc .L3
  48 003a 2368     	 ldr r3,[r4]
  49 003c A360     	 str r3,[r4,#8]
  50 003e 14E0     	 b .L3
  51              	.L4:
  52 0040 C068     	 ldr r0,[r0,#12]
  53 0042 FFF7FEFF 	 bl memcpy
  54 0046 236C     	 ldr r3,[r4,#64]
  55 0048 E268     	 ldr r2,[r4,#12]
  56 004a 5B42     	 neg r3,r3
  57 004c 2168     	 ldr r1,[r4]
  58 004e D218     	 add r2,r2,r3
  59 0050 E260     	 str r2,[r4,#12]
  60 0052 8A42     	 cmp r2,r1
  61 0054 02D2     	 bcs .L5
  62 0056 6268     	 ldr r2,[r4,#4]
  63 0058 D318     	 add r3,r2,r3
  64 005a E360     	 str r3,[r4,#12]
  65              	.L5:
  66 005c 0020     	 mov r0,#0
  67 005e 022E     	 cmp r6,#2
  68 0060 03D1     	 bne .L3
  69 0062 2B1C     	 mov r3,r5
  70 0064 5A1E     	 sub r2,r3,#1
  71 0066 9341     	 sbc r3,r3,r2
  72 0068 ED1A     	 sub r5,r5,r3
  73              	.L3:
  74 006a 0135     	 add r5,r5,#1
  75 006c A563     	 str r5,[r4,#56]
  76              	 
  77 006e 70BD     	 pop {r4,r5,r6,pc}
  79              	 .section .text.prvNotifyQueueSetContainer,"ax",%progbits
  80              	 .align 1
  81              	 .code 16
  82              	 .thumb_func
  84              	prvNotifyQueueSetContainer:
  85 0000 F7B5     	 push {r0,r1,r2,r4,r5,r6,r7,lr}
  86 0002 846C     	 ldr r4,[r0,#72]
  87 0004 0190     	 str r0,[sp,#4]
  88 0006 002C     	 cmp r4,#0
  89 0008 01D1     	 bne .L13
  90              	
  91 000a 72B6     	 cpsid i
  92              	
  93              	 .code 16
  94              	.L14:
  95 000c FEE7     	 b .L14
  96              	.L13:
  97 000e A26B     	 ldr r2,[r4,#56]
  98 0010 E36B     	 ldr r3,[r4,#60]
  99 0012 9A42     	 cmp r2,r3
 100 0014 01D3     	 bcc .L15
 101              	
 102 0016 72B6     	 cpsid i
 103              	
 104              	 .code 16
 105              	.L16:
 106 0018 FEE7     	 b .L16
 107              	.L15:
 108 001a A26B     	 ldr r2,[r4,#56]
 109 001c 0026     	 mov r6,#0
 110 001e 9A42     	 cmp r2,r3
 111 0020 1AD2     	 bcs .L17
 112 0022 271C     	 mov r7,r4
 113 0024 0A1C     	 mov r2,r1
 114 0026 4537     	 add r7,r7,#69
 115 0028 201C     	 mov r0,r4
 116 002a 01A9     	 add r1,sp,#4
 117 002c 3D78     	 ldrb r5,[r7]
 118 002e FFF7FEFF 	 bl prvCopyDataToQueue
 119 0032 EDB2     	 uxtb r5,r5
 120 0034 6BB2     	 sxtb r3,r5
 121 0036 061C     	 mov r6,r0
 122 0038 0133     	 add r3,r3,#1
 123 003a 0AD1     	 bne .L18
 124 003c 636A     	 ldr r3,[r4,#36]
 125 003e 002B     	 cmp r3,#0
 126 0040 0AD0     	 beq .L17
 127 0042 201C     	 mov r0,r4
 128 0044 2430     	 add r0,r0,#36
 129 0046 FFF7FEFF 	 bl xTaskRemoveFromEventList
 130 004a 0028     	 cmp r0,#0
 131 004c 04D0     	 beq .L17
 132 004e 0126     	 mov r6,#1
 133 0050 02E0     	 b .L17
 134              	.L18:
 135 0052 0135     	 add r5,r5,#1
 136 0054 EDB2     	 uxtb r5,r5
 137 0056 3D70     	 strb r5,[r7]
 138              	.L17:
 139 0058 301C     	 mov r0,r6
 140              	 
 141 005a FEBD     	 pop {r1,r2,r3,r4,r5,r6,r7,pc}
 143              	 .section .text.unlikely.prvCopyDataFromQueue,"ax",%progbits
 144              	 .align 1
 145              	 .code 16
 146              	 .thumb_func
 148              	prvCopyDataFromQueue:
 149 0000 026C     	 ldr r2,[r0,#64]
 150 0002 10B5     	 push {r4,lr}
 151 0004 031C     	 mov r3,r0
 152 0006 002A     	 cmp r2,#0
 153 0008 0BD0     	 beq .L26
 154 000a C068     	 ldr r0,[r0,#12]
 155 000c 8418     	 add r4,r0,r2
 156 000e 5868     	 ldr r0,[r3,#4]
 157 0010 DC60     	 str r4,[r3,#12]
 158 0012 8442     	 cmp r4,r0
 159 0014 01D3     	 bcc .L28
 160 0016 1868     	 ldr r0,[r3]
 161 0018 D860     	 str r0,[r3,#12]
 162              	.L28:
 163 001a 081C     	 mov r0,r1
 164 001c D968     	 ldr r1,[r3,#12]
 165 001e FFF7FEFF 	 bl memcpy
 166              	.L26:
 167              	 
 168 0022 10BD     	 pop {r4,pc}
 170              	 .section .text.prvUnlockQueue,"ax",%progbits
 171              	 .align 1
 172              	 .code 16
 173              	 .thumb_func
 175              	prvUnlockQueue:
 176 0000 70B5     	 push {r4,r5,r6,lr}
 177 0002 041C     	 mov r4,r0
 178 0004 261C     	 mov r6,r4
 179 0006 4536     	 add r6,r6,#69
 180 0008 FFF7FEFF 	 bl vPortEnterCritical
 181 000c 3578     	 ldrb r5,[r6]
 182              	.L54:
 183 000e EDB2     	 uxtb r5,r5
 184 0010 6BB2     	 sxtb r3,r5
 185 0012 002B     	 cmp r3,#0
 186 0014 15DD     	 ble .L37
 187 0016 A36C     	 ldr r3,[r4,#72]
 188 0018 002B     	 cmp r3,#0
 189 001a 08D0     	 beq .L34
 190 001c 201C     	 mov r0,r4
 191 001e 0021     	 mov r1,#0
 192 0020 FFF7FEFF 	 bl prvNotifyQueueSetContainer
 193              	.L53:
 194 0024 0028     	 cmp r0,#0
 195 0026 0AD0     	 beq .L36
 196 0028 FFF7FEFF 	 bl vTaskMissedYield
 197 002c 07E0     	 b .L36
 198              	.L34:
 199 002e 636A     	 ldr r3,[r4,#36]
 200 0030 002B     	 cmp r3,#0
 201 0032 06D0     	 beq .L37
 202 0034 201C     	 mov r0,r4
 203 0036 2430     	 add r0,r0,#36
 204 0038 FFF7FEFF 	 bl xTaskRemoveFromEventList
 205 003c F2E7     	 b .L53
 206              	.L36:
 207 003e 013D     	 sub r5,r5,#1
 208 0040 E5E7     	 b .L54
 209              	.L37:
 210 0042 FF23     	 mov r3,#255
 211 0044 3370     	 strb r3,[r6]
 212 0046 261C     	 mov r6,r4
 213 0048 4436     	 add r6,r6,#68
 214 004a FFF7FEFF 	 bl vPortExitCritical
 215 004e FFF7FEFF 	 bl vPortEnterCritical
 216 0052 3578     	 ldrb r5,[r6]
 217              	.L55:
 218 0054 EDB2     	 uxtb r5,r5
 219 0056 6BB2     	 sxtb r3,r5
 220 0058 002B     	 cmp r3,#0
 221 005a 0CDD     	 ble .L41
 222 005c 2369     	 ldr r3,[r4,#16]
 223 005e 002B     	 cmp r3,#0
 224 0060 09D0     	 beq .L41
 225 0062 201C     	 mov r0,r4
 226 0064 1030     	 add r0,r0,#16
 227 0066 FFF7FEFF 	 bl xTaskRemoveFromEventList
 228 006a 0028     	 cmp r0,#0
 229 006c 01D0     	 beq .L42
 230 006e FFF7FEFF 	 bl vTaskMissedYield
 231              	.L42:
 232 0072 013D     	 sub r5,r5,#1
 233 0074 EEE7     	 b .L55
 234              	.L41:
 235 0076 FF23     	 mov r3,#255
 236 0078 3370     	 strb r3,[r6]
 237 007a FFF7FEFF 	 bl vPortExitCritical
 238              	 
 239 007e 70BD     	 pop {r4,r5,r6,pc}
 241              	 .section .text.xQueueGenericReset,"ax",%progbits
 242              	 .align 1
 243              	 .global xQueueGenericReset
 244              	 .code 16
 245              	 .thumb_func
 247              	xQueueGenericReset:
 248 0000 38B5     	 push {r3,r4,r5,lr}
 249 0002 0028     	 cmp r0,#0
 250 0004 01D1     	 bne .L57
 251              	
 252 0006 72B6     	 cpsid i
 253              	
 254              	 .code 16
 255              	.L58:
 256 0008 FEE7     	 b .L58
 257              	.L57:
 258 000a 041C     	 mov r4,r0
 259 000c 0D1C     	 mov r5,r1
 260 000e FFF7FEFF 	 bl vPortEnterCritical
 261 0012 216C     	 ldr r1,[r4,#64]
 262 0014 E36B     	 ldr r3,[r4,#60]
 263 0016 2268     	 ldr r2,[r4]
 264 0018 4B43     	 mul r3,r1
 265 001a D018     	 add r0,r2,r3
 266 001c 5B1A     	 sub r3,r3,r1
 267 001e A260     	 str r2,[r4,#8]
 268 0020 D318     	 add r3,r2,r3
 269 0022 221C     	 mov r2,r4
 270 0024 6060     	 str r0,[r4,#4]
 271 0026 E360     	 str r3,[r4,#12]
 272 0028 0020     	 mov r0,#0
 273 002a FF23     	 mov r3,#255
 274 002c 4432     	 add r2,r2,#68
 275 002e A063     	 str r0,[r4,#56]
 276 0030 1370     	 strb r3,[r2]
 277 0032 5370     	 strb r3,[r2,#1]
 278 0034 8542     	 cmp r5,r0
 279 0036 0BD1     	 bne .L59
 280 0038 2369     	 ldr r3,[r4,#16]
 281 003a 8342     	 cmp r3,r0
 282 003c 10D0     	 beq .L61
 283 003e 201C     	 mov r0,r4
 284 0040 1030     	 add r0,r0,#16
 285 0042 FFF7FEFF 	 bl xTaskRemoveFromEventList
 286 0046 0028     	 cmp r0,#0
 287 0048 0AD0     	 beq .L61
 288 004a FFF7FEFF 	 bl vPortYield
 289 004e 07E0     	 b .L61
 290              	.L59:
 291 0050 201C     	 mov r0,r4
 292 0052 1030     	 add r0,r0,#16
 293 0054 FFF7FEFF 	 bl vListInitialise
 294 0058 201C     	 mov r0,r4
 295 005a 2430     	 add r0,r0,#36
 296 005c FFF7FEFF 	 bl vListInitialise
 297              	.L61:
 298 0060 FFF7FEFF 	 bl vPortExitCritical
 299              	 
 300 0064 0120     	 mov r0,#1
 301 0066 38BD     	 pop {r3,r4,r5,pc}
 303              	 .section .text.xQueueGenericCreate,"ax",%progbits
 304              	 .align 1
 305              	 .global xQueueGenericCreate
 306              	 .code 16
 307              	 .thumb_func
 309              	xQueueGenericCreate:
 310 0000 70B5     	 push {r4,r5,r6,lr}
 311 0002 0028     	 cmp r0,#0
 312 0004 01D1     	 bne .L67
 313              	
 314 0006 72B6     	 cpsid i
 315              	
 316              	 .code 16
 317              	.L68:
 318 0008 FEE7     	 b .L68
 319              	.L67:
 320 000a 0023     	 mov r3,#0
 321 000c 9942     	 cmp r1,r3
 322 000e 01D0     	 beq .L69
 323 0010 0B1C     	 mov r3,r1
 324 0012 4343     	 mul r3,r0
 325              	.L69:
 326 0014 4C33     	 add r3,r3,#76
 327 0016 061C     	 mov r6,r0
 328 0018 181C     	 mov r0,r3
 329 001a 0D1C     	 mov r5,r1
 330 001c FFF7FEFF 	 bl pvPortMalloc
 331 0020 041E     	 sub r4,r0,#0
 332 0022 0ED0     	 beq .L70
 333 0024 002D     	 cmp r5,#0
 334 0026 01D1     	 bne .L71
 335 0028 2060     	 str r0,[r4]
 336 002a 02E0     	 b .L72
 337              	.L71:
 338 002c 031C     	 mov r3,r0
 339 002e 4C33     	 add r3,r3,#76
 340 0030 0360     	 str r3,[r0]
 341              	.L72:
 342 0032 E663     	 str r6,[r4,#60]
 343 0034 2564     	 str r5,[r4,#64]
 344 0036 201C     	 mov r0,r4
 345 0038 0121     	 mov r1,#1
 346 003a FFF7FEFF 	 bl xQueueGenericReset
 347 003e 0023     	 mov r3,#0
 348 0040 A364     	 str r3,[r4,#72]
 349              	.L70:
 350 0042 201C     	 mov r0,r4
 351              	 
 352 0044 70BD     	 pop {r4,r5,r6,pc}
 354              	 .section .text.xQueueGenericSend,"ax",%progbits
 355              	 .align 1
 356              	 .global xQueueGenericSend
 357              	 .code 16
 358              	 .thumb_func
 360              	xQueueGenericSend:
 361 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 362 0002 85B0     	 sub sp,sp,#20
 363 0004 0192     	 str r2,[sp,#4]
 364 0006 0028     	 cmp r0,#0
 365 0008 01D1     	 bne .L79
 366              	
 367 000a 72B6     	 cpsid i
 368              	
 369              	 .code 16
 370              	.L80:
 371 000c FEE7     	 b .L80
 372              	.L79:
 373 000e 0029     	 cmp r1,#0
 374 0010 04D1     	 bne .L81
 375 0012 026C     	 ldr r2,[r0,#64]
 376 0014 002A     	 cmp r2,#0
 377 0016 01D0     	 beq .L81
 378              	
 379 0018 72B6     	 cpsid i
 380              	
 381              	 .code 16
 382              	.L83:
 383 001a FEE7     	 b .L83
 384              	.L81:
 385 001c 1D1C     	 mov r5,r3
 386 001e 0091     	 str r1,[sp]
 387 0020 041C     	 mov r4,r0
 388 0022 0027     	 mov r7,#0
 389 0024 022B     	 cmp r3,#2
 390 0026 3BD1     	 bne .L84
 391 0028 E36B     	 ldr r3,[r4,#60]
 392 002a 012B     	 cmp r3,#1
 393 002c 72D1     	 bne .L109
 394 002e 37E0     	 b .L84
 395              	.L95:
 396 0030 002F     	 cmp r7,#0
 397 0032 02D1     	 bne .L96
 398 0034 02A8     	 add r0,sp,#8
 399 0036 FFF7FEFF 	 bl vTaskSetTimeOutState
 400              	.L96:
 401 003a FFF7FEFF 	 bl vPortExitCritical
 402 003e FFF7FEFF 	 bl vTaskSuspendAll
 403 0042 FFF7FEFF 	 bl vPortEnterCritical
 404 0046 221C     	 mov r2,r4
 405 0048 4432     	 add r2,r2,#68
 406 004a 1378     	 ldrb r3,[r2]
 407 004c 5BB2     	 sxtb r3,r3
 408 004e 0133     	 add r3,r3,#1
 409 0050 01D1     	 bne .L97
 410 0052 0023     	 mov r3,#0
 411 0054 1370     	 strb r3,[r2]
 412              	.L97:
 413 0056 221C     	 mov r2,r4
 414 0058 4532     	 add r2,r2,#69
 415 005a 1378     	 ldrb r3,[r2]
 416 005c 5BB2     	 sxtb r3,r3
 417 005e 0133     	 add r3,r3,#1
 418 0060 01D1     	 bne .L98
 419 0062 0023     	 mov r3,#0
 420 0064 1370     	 strb r3,[r2]
 421              	.L98:
 422 0066 FFF7FEFF 	 bl vPortExitCritical
 423 006a 02A8     	 add r0,sp,#8
 424 006c 01A9     	 add r1,sp,#4
 425 006e FFF7FEFF 	 bl xTaskCheckForTimeOut
 426 0072 0028     	 cmp r0,#0
 427 0074 47D1     	 bne .L99
 428 0076 FFF7FEFF 	 bl vPortEnterCritical
 429 007a A76B     	 ldr r7,[r4,#56]
 430 007c E66B     	 ldr r6,[r4,#60]
 431 007e FFF7FEFF 	 bl vPortExitCritical
 432 0082 201C     	 mov r0,r4
 433 0084 B742     	 cmp r7,r6
 434 0086 39D1     	 bne .L100
 435 0088 1030     	 add r0,r0,#16
 436 008a 0199     	 ldr r1,[sp,#4]
 437 008c FFF7FEFF 	 bl vTaskPlaceOnEventList
 438 0090 201C     	 mov r0,r4
 439 0092 FFF7FEFF 	 bl prvUnlockQueue
 440 0096 FFF7FEFF 	 bl xTaskResumeAll
 441 009a 0028     	 cmp r0,#0
 442 009c 2BD0     	 beq .L115
 443              	.L101:
 444 009e 0127     	 mov r7,#1
 445              	.L84:
 446 00a0 FFF7FEFF 	 bl vPortEnterCritical
 447 00a4 A36B     	 ldr r3,[r4,#56]
 448 00a6 E26B     	 ldr r2,[r4,#60]
 449 00a8 9342     	 cmp r3,r2
 450 00aa 01D3     	 bcc .L87
 451 00ac 022D     	 cmp r5,#2
 452 00ae 1CD1     	 bne .L88
 453              	.L87:
 454 00b0 201C     	 mov r0,r4
 455 00b2 0099     	 ldr r1,[sp]
 456 00b4 2A1C     	 mov r2,r5
 457 00b6 FFF7FEFF 	 bl prvCopyDataToQueue
 458 00ba A36C     	 ldr r3,[r4,#72]
 459 00bc 002B     	 cmp r3,#0
 460 00be 08D0     	 beq .L89
 461 00c0 201C     	 mov r0,r4
 462 00c2 291C     	 mov r1,r5
 463 00c4 FFF7FEFF 	 bl prvNotifyQueueSetContainer
 464              	.L112:
 465 00c8 0028     	 cmp r0,#0
 466 00ca 0AD0     	 beq .L91
 467 00cc FFF7FEFF 	 bl vPortYield
 468 00d0 07E0     	 b .L91
 469              	.L89:
 470 00d2 636A     	 ldr r3,[r4,#36]
 471 00d4 002B     	 cmp r3,#0
 472 00d6 F7D0     	 beq .L112
 473 00d8 201C     	 mov r0,r4
 474 00da 2430     	 add r0,r0,#36
 475 00dc FFF7FEFF 	 bl xTaskRemoveFromEventList
 476 00e0 F2E7     	 b .L112
 477              	.L91:
 478 00e2 FFF7FEFF 	 bl vPortExitCritical
 479 00e6 0120     	 mov r0,#1
 480 00e8 16E0     	 b .L110
 481              	.L88:
 482 00ea 019E     	 ldr r6,[sp,#4]
 483 00ec 002E     	 cmp r6,#0
 484 00ee 9FD1     	 bne .L95
 485 00f0 FFF7FEFF 	 bl vPortExitCritical
 486 00f4 0CE0     	 b .L114
 487              	.L115:
 488 00f6 FFF7FEFF 	 bl vPortYield
 489 00fa D0E7     	 b .L101
 490              	.L100:
 491 00fc FFF7FEFF 	 bl prvUnlockQueue
 492 0100 FFF7FEFF 	 bl xTaskResumeAll
 493 0104 CBE7     	 b .L101
 494              	.L99:
 495 0106 201C     	 mov r0,r4
 496 0108 FFF7FEFF 	 bl prvUnlockQueue
 497 010c FFF7FEFF 	 bl xTaskResumeAll
 498              	.L114:
 499 0110 0020     	 mov r0,#0
 500 0112 01E0     	 b .L110
 501              	.L109:
 502              	
 503 0114 72B6     	 cpsid i
 504              	
 505              	 .code 16
 506              	.L86:
 507 0116 FEE7     	 b .L86
 508              	.L110:
 509 0118 05B0     	 add sp,sp,#20
 510              	 
 511 011a F0BD     	 pop {r4,r5,r6,r7,pc}
 513              	 .section .text.xQueueCreateMutex,"ax",%progbits
 514              	 .align 1
 515              	 .global xQueueCreateMutex
 516              	 .code 16
 517              	 .thumb_func
 519              	xQueueCreateMutex:
 520 0000 10B5     	 push {r4,lr}
 521 0002 021C     	 mov r2,r0
 522 0004 0021     	 mov r1,#0
 523 0006 0120     	 mov r0,#1
 524 0008 FFF7FEFF 	 bl xQueueGenericCreate
 525 000c 041E     	 sub r4,r0,#0
 526 000e 07D0     	 beq .L117
 527 0010 0023     	 mov r3,#0
 528 0012 4360     	 str r3,[r0,#4]
 529 0014 0360     	 str r3,[r0]
 530 0016 C360     	 str r3,[r0,#12]
 531 0018 191C     	 mov r1,r3
 532 001a 1A1C     	 mov r2,r3
 533 001c FFF7FEFF 	 bl xQueueGenericSend
 534              	.L117:
 535 0020 201C     	 mov r0,r4
 536              	 
 537 0022 10BD     	 pop {r4,pc}
 539              	 .section .text.xQueueGenericSendFromISR,"ax",%progbits
 540              	 .align 1
 541              	 .global xQueueGenericSendFromISR
 542              	 .code 16
 543              	 .thumb_func
 545              	xQueueGenericSendFromISR:
 546 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 547 0002 85B0     	 sub sp,sp,#20
 548 0004 0028     	 cmp r0,#0
 549 0006 01D1     	 bne .L122
 550              	
 551 0008 72B6     	 cpsid i
 552              	
 553              	 .code 16
 554              	.L123:
 555 000a FEE7     	 b .L123
 556              	.L122:
 557 000c 0029     	 cmp r1,#0
 558 000e 04D1     	 bne .L124
 559 0010 046C     	 ldr r4,[r0,#64]
 560 0012 002C     	 cmp r4,#0
 561 0014 01D0     	 beq .L124
 562              	
 563 0016 72B6     	 cpsid i
 564              	
 565              	 .code 16
 566              	.L126:
 567 0018 FEE7     	 b .L126
 568              	.L124:
 569 001a 022B     	 cmp r3,#2
 570 001c 04D1     	 bne .L127
 571 001e C46B     	 ldr r4,[r0,#60]
 572 0020 012C     	 cmp r4,#1
 573 0022 01D0     	 beq .L127
 574              	
 575 0024 72B6     	 cpsid i
 576              	
 577              	 .code 16
 578              	.L129:
 579 0026 FEE7     	 b .L129
 580              	.L127:
 581 0028 041C     	 mov r4,r0
 582 002a 1E1C     	 mov r6,r3
 583 002c 171C     	 mov r7,r2
 584 002e 0391     	 str r1,[sp,#12]
 585 0030 FFF7FEFF 	 bl ulSetInterruptMaskFromISR
 586 0034 A36B     	 ldr r3,[r4,#56]
 587 0036 E26B     	 ldr r2,[r4,#60]
 588 0038 0290     	 str r0,[sp,#8]
 589 003a 9342     	 cmp r3,r2
 590 003c 02D3     	 bcc .L136
 591 003e 0025     	 mov r5,#0
 592 0040 022E     	 cmp r6,#2
 593 0042 27D1     	 bne .L130
 594              	.L136:
 595 0044 231C     	 mov r3,r4
 596 0046 4533     	 add r3,r3,#69
 597 0048 0193     	 str r3,[sp,#4]
 598 004a 1D78     	 ldrb r5,[r3]
 599 004c 201C     	 mov r0,r4
 600 004e EDB2     	 uxtb r5,r5
 601 0050 0399     	 ldr r1,[sp,#12]
 602 0052 321C     	 mov r2,r6
 603 0054 FFF7FEFF 	 bl prvCopyDataToQueue
 604 0058 6BB2     	 sxtb r3,r5
 605 005a 0133     	 add r3,r3,#1
 606 005c 15D1     	 bne .L131
 607 005e A36C     	 ldr r3,[r4,#72]
 608 0060 002B     	 cmp r3,#0
 609 0062 0AD0     	 beq .L132
 610 0064 201C     	 mov r0,r4
 611 0066 311C     	 mov r1,r6
 612 0068 FFF7FEFF 	 bl prvNotifyQueueSetContainer
 613              	.L157:
 614 006c 0028     	 cmp r0,#0
 615 006e 10D0     	 beq .L158
 616 0070 002F     	 cmp r7,#0
 617 0072 0ED0     	 beq .L158
 618 0074 0125     	 mov r5,#1
 619 0076 3D60     	 str r5,[r7]
 620 0078 0CE0     	 b .L130
 621              	.L132:
 622 007a 636A     	 ldr r3,[r4,#36]
 623 007c 002B     	 cmp r3,#0
 624 007e 08D0     	 beq .L158
 625 0080 201C     	 mov r0,r4
 626 0082 2430     	 add r0,r0,#36
 627 0084 FFF7FEFF 	 bl xTaskRemoveFromEventList
 628 0088 F0E7     	 b .L157
 629              	.L131:
 630 008a 0135     	 add r5,r5,#1
 631 008c 019B     	 ldr r3,[sp,#4]
 632 008e EDB2     	 uxtb r5,r5
 633 0090 1D70     	 strb r5,[r3]
 634              	.L158:
 635 0092 0125     	 mov r5,#1
 636              	.L130:
 637 0094 0298     	 ldr r0,[sp,#8]
 638 0096 FFF7FEFF 	 bl vClearInterruptMaskFromISR
 639 009a 281C     	 mov r0,r5
 640 009c 05B0     	 add sp,sp,#20
 641              	 
 642 009e F0BD     	 pop {r4,r5,r6,r7,pc}
 644              	 .section .text.xQueueGiveFromISR,"ax",%progbits
 645              	 .align 1
 646              	 .global xQueueGiveFromISR
 647              	 .code 16
 648              	 .thumb_func
 650              	xQueueGiveFromISR:
 651 0000 70B5     	 push {r4,r5,r6,lr}
 652 0002 0028     	 cmp r0,#0
 653 0004 01D1     	 bne .L160
 654              	
 655 0006 72B6     	 cpsid i
 656              	
 657              	 .code 16
 658              	.L161:
 659 0008 FEE7     	 b .L161
 660              	.L160:
 661 000a 036C     	 ldr r3,[r0,#64]
 662 000c 002B     	 cmp r3,#0
 663 000e 01D0     	 beq .L162
 664              	
 665 0010 72B6     	 cpsid i
 666              	
 667              	 .code 16
 668              	.L163:
 669 0012 FEE7     	 b .L163
 670              	.L162:
 671 0014 0368     	 ldr r3,[r0]
 672 0016 002B     	 cmp r3,#0
 673 0018 02D1     	 bne .L164
 674 001a 4368     	 ldr r3,[r0,#4]
 675 001c 002B     	 cmp r3,#0
 676 001e 2ED1     	 bne .L182
 677              	.L164:
 678 0020 041C     	 mov r4,r0
 679 0022 0E1C     	 mov r6,r1
 680 0024 FFF7FEFF 	 bl ulSetInterruptMaskFromISR
 681 0028 A26B     	 ldr r2,[r4,#56]
 682 002a E36B     	 ldr r3,[r4,#60]
 683 002c 051C     	 mov r5,r0
 684 002e 9A42     	 cmp r2,r3
 685 0030 23D2     	 bcs .L187
 686 0032 211C     	 mov r1,r4
 687 0034 4531     	 add r1,r1,#69
 688 0036 0B78     	 ldrb r3,[r1]
 689 0038 0132     	 add r2,r2,#1
 690 003a DBB2     	 uxtb r3,r3
 691 003c A263     	 str r2,[r4,#56]
 692 003e 5AB2     	 sxtb r2,r3
 693 0040 0132     	 add r2,r2,#1
 694 0042 15D1     	 bne .L167
 695 0044 A36C     	 ldr r3,[r4,#72]
 696 0046 002B     	 cmp r3,#0
 697 0048 0AD0     	 beq .L168
 698 004a 201C     	 mov r0,r4
 699 004c 0021     	 mov r1,#0
 700 004e FFF7FEFF 	 bl prvNotifyQueueSetContainer
 701              	.L185:
 702 0052 0028     	 cmp r0,#0
 703 0054 0FD0     	 beq .L186
 704 0056 002E     	 cmp r6,#0
 705 0058 0DD0     	 beq .L186
 706 005a 0124     	 mov r4,#1
 707 005c 3460     	 str r4,[r6]
 708 005e 10E0     	 b .L170
 709              	.L168:
 710 0060 636A     	 ldr r3,[r4,#36]
 711 0062 002B     	 cmp r3,#0
 712 0064 07D0     	 beq .L186
 713 0066 201C     	 mov r0,r4
 714 0068 2430     	 add r0,r0,#36
 715 006a FFF7FEFF 	 bl xTaskRemoveFromEventList
 716 006e F0E7     	 b .L185
 717              	.L167:
 718 0070 0133     	 add r3,r3,#1
 719 0072 DBB2     	 uxtb r3,r3
 720 0074 0B70     	 strb r3,[r1]
 721              	.L186:
 722 0076 0124     	 mov r4,#1
 723 0078 03E0     	 b .L170
 724              	.L187:
 725 007a 0024     	 mov r4,#0
 726 007c 01E0     	 b .L170
 727              	.L182:
 728              	
 729 007e 72B6     	 cpsid i
 730              	
 731              	 .code 16
 732              	.L166:
 733 0080 FEE7     	 b .L166
 734              	.L170:
 735 0082 281C     	 mov r0,r5
 736 0084 FFF7FEFF 	 bl vClearInterruptMaskFromISR
 737              	 
 738 0088 201C     	 mov r0,r4
 739 008a 70BD     	 pop {r4,r5,r6,pc}
 741              	 .section .text.xQueueGenericReceive,"ax",%progbits
 742              	 .align 1
 743              	 .global xQueueGenericReceive
 744              	 .code 16
 745              	 .thumb_func
 747              	xQueueGenericReceive:
 748 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 749 0002 85B0     	 sub sp,sp,#20
 750 0004 0192     	 str r2,[sp,#4]
 751 0006 0028     	 cmp r0,#0
 752 0008 01D1     	 bne .L189
 753              	
 754 000a 72B6     	 cpsid i
 755              	
 756              	 .code 16
 757              	.L190:
 758 000c FEE7     	 b .L190
 759              	.L189:
 760 000e 0027     	 mov r7,#0
 761 0010 0093     	 str r3,[sp]
 762 0012 0E1C     	 mov r6,r1
 763 0014 041C     	 mov r4,r0
 764 0016 B942     	 cmp r1,r7
 765 0018 04D1     	 bne .L191
 766 001a 036C     	 ldr r3,[r0,#64]
 767 001c BB42     	 cmp r3,r7
 768 001e 00D0     	 beq .LCB898
 769 0020 8BE0     	 b .L223
 770              	.LCB898:
 771 0022 0F1C     	 mov r7,r1
 772              	.L191:
 773 0024 FFF7FEFF 	 bl vPortEnterCritical
 774 0028 A56B     	 ldr r5,[r4,#56]
 775 002a 002D     	 cmp r5,#0
 776 002c 26D0     	 beq .L194
 777 002e 201C     	 mov r0,r4
 778 0030 311C     	 mov r1,r6
 779 0032 E768     	 ldr r7,[r4,#12]
 780 0034 FFF7FEFF 	 bl prvCopyDataFromQueue
 781 0038 009B     	 ldr r3,[sp]
 782 003a 002B     	 cmp r3,#0
 783 003c 13D1     	 bne .L195
 784 003e 2368     	 ldr r3,[r4]
 785 0040 013D     	 sub r5,r5,#1
 786 0042 A563     	 str r5,[r4,#56]
 787 0044 002B     	 cmp r3,#0
 788 0046 02D1     	 bne .L196
 789 0048 FFF7FEFF 	 bl pvTaskIncrementMutexHeldCount
 790 004c 6060     	 str r0,[r4,#4]
 791              	.L196:
 792 004e 2369     	 ldr r3,[r4,#16]
 793 0050 002B     	 cmp r3,#0
 794 0052 0FD0     	 beq .L198
 795 0054 201C     	 mov r0,r4
 796 0056 1030     	 add r0,r0,#16
 797              	.L221:
 798 0058 FFF7FEFF 	 bl xTaskRemoveFromEventList
 799 005c 0028     	 cmp r0,#0
 800 005e 09D0     	 beq .L198
 801 0060 FFF7FEFF 	 bl vPortYield
 802 0064 06E0     	 b .L198
 803              	.L195:
 804 0066 636A     	 ldr r3,[r4,#36]
 805 0068 E760     	 str r7,[r4,#12]
 806 006a 002B     	 cmp r3,#0
 807 006c 02D0     	 beq .L198
 808 006e 201C     	 mov r0,r4
 809 0070 2430     	 add r0,r0,#36
 810 0072 F1E7     	 b .L221
 811              	.L198:
 812 0074 FFF7FEFF 	 bl vPortExitCritical
 813 0078 0120     	 mov r0,#1
 814 007a 60E0     	 b .L220
 815              	.L194:
 816 007c 019D     	 ldr r5,[sp,#4]
 817 007e 002D     	 cmp r5,#0
 818 0080 02D1     	 bne .L202
 819 0082 FFF7FEFF 	 bl vPortExitCritical
 820 0086 56E0     	 b .L222
 821              	.L202:
 822 0088 002F     	 cmp r7,#0
 823 008a 02D1     	 bne .L203
 824 008c 02A8     	 add r0,sp,#8
 825 008e FFF7FEFF 	 bl vTaskSetTimeOutState
 826              	.L203:
 827 0092 FFF7FEFF 	 bl vPortExitCritical
 828 0096 FFF7FEFF 	 bl vTaskSuspendAll
 829 009a FFF7FEFF 	 bl vPortEnterCritical
 830 009e 221C     	 mov r2,r4
 831 00a0 4432     	 add r2,r2,#68
 832 00a2 1378     	 ldrb r3,[r2]
 833 00a4 5BB2     	 sxtb r3,r3
 834 00a6 0133     	 add r3,r3,#1
 835 00a8 01D1     	 bne .L204
 836 00aa 0023     	 mov r3,#0
 837 00ac 1370     	 strb r3,[r2]
 838              	.L204:
 839 00ae 221C     	 mov r2,r4
 840 00b0 4532     	 add r2,r2,#69
 841 00b2 1378     	 ldrb r3,[r2]
 842 00b4 5BB2     	 sxtb r3,r3
 843 00b6 0133     	 add r3,r3,#1
 844 00b8 01D1     	 bne .L205
 845 00ba 0023     	 mov r3,#0
 846 00bc 1370     	 strb r3,[r2]
 847              	.L205:
 848 00be FFF7FEFF 	 bl vPortExitCritical
 849 00c2 02A8     	 add r0,sp,#8
 850 00c4 01A9     	 add r1,sp,#4
 851 00c6 FFF7FEFF 	 bl xTaskCheckForTimeOut
 852 00ca 0028     	 cmp r0,#0
 853 00cc 27D1     	 bne .L206
 854 00ce FFF7FEFF 	 bl vPortEnterCritical
 855 00d2 A56B     	 ldr r5,[r4,#56]
 856 00d4 FFF7FEFF 	 bl vPortExitCritical
 857 00d8 002D     	 cmp r5,#0
 858 00da 1AD1     	 bne .L207
 859 00dc 2368     	 ldr r3,[r4]
 860 00de 002B     	 cmp r3,#0
 861 00e0 06D1     	 bne .L208
 862 00e2 FFF7FEFF 	 bl vPortEnterCritical
 863 00e6 6068     	 ldr r0,[r4,#4]
 864 00e8 FFF7FEFF 	 bl vTaskPriorityInherit
 865 00ec FFF7FEFF 	 bl vPortExitCritical
 866              	.L208:
 867 00f0 201C     	 mov r0,r4
 868 00f2 0199     	 ldr r1,[sp,#4]
 869 00f4 2430     	 add r0,r0,#36
 870 00f6 FFF7FEFF 	 bl vTaskPlaceOnEventList
 871 00fa 201C     	 mov r0,r4
 872 00fc FFF7FEFF 	 bl prvUnlockQueue
 873 0100 FFF7FEFF 	 bl xTaskResumeAll
 874 0104 0028     	 cmp r0,#0
 875 0106 01D0     	 beq .L224
 876              	.L210:
 877 0108 0127     	 mov r7,#1
 878 010a 8BE7     	 b .L191
 879              	.L224:
 880 010c FFF7FEFF 	 bl vPortYield
 881 0110 FAE7     	 b .L210
 882              	.L207:
 883 0112 201C     	 mov r0,r4
 884 0114 FFF7FEFF 	 bl prvUnlockQueue
 885 0118 FFF7FEFF 	 bl xTaskResumeAll
 886 011c F4E7     	 b .L210
 887              	.L206:
 888 011e 201C     	 mov r0,r4
 889 0120 FFF7FEFF 	 bl prvUnlockQueue
 890 0124 FFF7FEFF 	 bl xTaskResumeAll
 891 0128 FFF7FEFF 	 bl vPortEnterCritical
 892 012c A56B     	 ldr r5,[r4,#56]
 893 012e FFF7FEFF 	 bl vPortExitCritical
 894 0132 002D     	 cmp r5,#0
 895 0134 E8D1     	 bne .L210
 896              	.L222:
 897 0136 281C     	 mov r0,r5
 898 0138 01E0     	 b .L220
 899              	.L223:
 900              	
 901 013a 72B6     	 cpsid i
 902              	
 903              	 .code 16
 904              	.L193:
 905 013c FEE7     	 b .L193
 906              	.L220:
 907 013e 05B0     	 add sp,sp,#20
 908              	 
 909 0140 F0BD     	 pop {r4,r5,r6,r7,pc}
 911              	 .section .text.xQueueReceiveFromISR,"ax",%progbits
 912              	 .align 1
 913              	 .global xQueueReceiveFromISR
 914              	 .code 16
 915              	 .thumb_func
 917              	xQueueReceiveFromISR:
 918 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 919 0002 85B0     	 sub sp,sp,#20
 920 0004 0028     	 cmp r0,#0
 921 0006 01D1     	 bne .L226
 922              	
 923 0008 72B6     	 cpsid i
 924              	
 925              	 .code 16
 926              	.L227:
 927 000a FEE7     	 b .L227
 928              	.L226:
 929 000c 0029     	 cmp r1,#0
 930 000e 04D1     	 bne .L228
 931 0010 036C     	 ldr r3,[r0,#64]
 932 0012 002B     	 cmp r3,#0
 933 0014 01D0     	 beq .L228
 934              	
 935 0016 72B6     	 cpsid i
 936              	
 937              	 .code 16
 938              	.L230:
 939 0018 FEE7     	 b .L230
 940              	.L228:
 941 001a 051C     	 mov r5,r0
 942 001c 161C     	 mov r6,r2
 943 001e 0391     	 str r1,[sp,#12]
 944 0020 FFF7FEFF 	 bl ulSetInterruptMaskFromISR
 945 0024 AC6B     	 ldr r4,[r5,#56]
 946 0026 0290     	 str r0,[sp,#8]
 947 0028 002C     	 cmp r4,#0
 948 002a 22D0     	 beq .L233
 949 002c 2F1C     	 mov r7,r5
 950 002e 4437     	 add r7,r7,#68
 951 0030 3B78     	 ldrb r3,[r7]
 952 0032 281C     	 mov r0,r5
 953 0034 DBB2     	 uxtb r3,r3
 954 0036 0399     	 ldr r1,[sp,#12]
 955 0038 0193     	 str r3,[sp,#4]
 956 003a FFF7FEFF 	 bl prvCopyDataFromQueue
 957 003e 6B46     	 mov r3,sp
 958 0040 1B79     	 ldrb r3,[r3,#4]
 959 0042 013C     	 sub r4,r4,#1
 960 0044 5BB2     	 sxtb r3,r3
 961 0046 AC63     	 str r4,[r5,#56]
 962 0048 0133     	 add r3,r3,#1
 963 004a 0DD1     	 bne .L231
 964 004c 2B69     	 ldr r3,[r5,#16]
 965 004e 002B     	 cmp r3,#0
 966 0050 0ED0     	 beq .L247
 967 0052 281C     	 mov r0,r5
 968 0054 1030     	 add r0,r0,#16
 969 0056 FFF7FEFF 	 bl xTaskRemoveFromEventList
 970 005a 0028     	 cmp r0,#0
 971 005c 08D0     	 beq .L247
 972 005e 002E     	 cmp r6,#0
 973 0060 06D0     	 beq .L247
 974 0062 0124     	 mov r4,#1
 975 0064 3460     	 str r4,[r6]
 976 0066 04E0     	 b .L233
 977              	.L231:
 978 0068 019B     	 ldr r3,[sp,#4]
 979 006a 0133     	 add r3,r3,#1
 980 006c DBB2     	 uxtb r3,r3
 981 006e 3B70     	 strb r3,[r7]
 982              	.L247:
 983 0070 0124     	 mov r4,#1
 984              	.L233:
 985 0072 0298     	 ldr r0,[sp,#8]
 986 0074 FFF7FEFF 	 bl vClearInterruptMaskFromISR
 987 0078 201C     	 mov r0,r4
 988 007a 05B0     	 add sp,sp,#20
 989              	 
 990 007c F0BD     	 pop {r4,r5,r6,r7,pc}
 992              	 .section .text.xQueuePeekFromISR,"ax",%progbits
 993              	 .align 1
 994              	 .global xQueuePeekFromISR
 995              	 .code 16
 996              	 .thumb_func
 998              	xQueuePeekFromISR:
 999 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 1000 0002 0028     	 cmp r0,#0
 1001 0004 01D1     	 bne .L249
 1002              	
 1003 0006 72B6     	 cpsid i
 1004              	
 1005              	 .code 16
 1006              	.L250:
 1007 0008 FEE7     	 b .L250
 1008              	.L249:
 1009 000a 036C     	 ldr r3,[r0,#64]
 1010 000c 0029     	 cmp r1,#0
 1011 000e 02D1     	 bne .L251
 1012 0010 002B     	 cmp r3,#0
 1013 0012 02D0     	 beq .L256
 1014 0014 03E0     	 b .L267
 1015              	.L251:
 1016 0016 002B     	 cmp r3,#0
 1017 0018 03D1     	 bne .L268
 1018              	.L256:
 1019              	
 1020 001a 72B6     	 cpsid i
 1021              	
 1022              	 .code 16
 1023              	.L254:
 1024 001c FEE7     	 b .L254
 1025              	.L267:
 1026              	
 1027 001e 72B6     	 cpsid i
 1028              	
 1029              	 .code 16
 1030              	.L253:
 1031 0020 FEE7     	 b .L253
 1032              	.L268:
 1033 0022 041C     	 mov r4,r0
 1034 0024 0D1C     	 mov r5,r1
 1035 0026 0026     	 mov r6,#0
 1036 0028 FFF7FEFF 	 bl ulSetInterruptMaskFromISR
 1037 002c A36B     	 ldr r3,[r4,#56]
 1038 002e 071C     	 mov r7,r0
 1039 0030 B342     	 cmp r3,r6
 1040 0032 06D0     	 beq .L255
 1041 0034 E668     	 ldr r6,[r4,#12]
 1042 0036 201C     	 mov r0,r4
 1043 0038 291C     	 mov r1,r5
 1044 003a FFF7FEFF 	 bl prvCopyDataFromQueue
 1045 003e E660     	 str r6,[r4,#12]
 1046 0040 0126     	 mov r6,#1
 1047              	.L255:
 1048 0042 381C     	 mov r0,r7
 1049 0044 FFF7FEFF 	 bl vClearInterruptMaskFromISR
 1050              	 
 1051 0048 301C     	 mov r0,r6
 1052 004a F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1054              	 .section .text.uxQueueMessagesWaiting,"ax",%progbits
 1055              	 .align 1
 1056              	 .global uxQueueMessagesWaiting
 1057              	 .code 16
 1058              	 .thumb_func
 1060              	uxQueueMessagesWaiting:
 1061 0000 10B5     	 push {r4,lr}
 1062 0002 0028     	 cmp r0,#0
 1063 0004 01D1     	 bne .L270
 1064              	
 1065 0006 72B6     	 cpsid i
 1066              	
 1067              	 .code 16
 1068              	.L271:
 1069 0008 FEE7     	 b .L271
 1070              	.L270:
 1071 000a 041C     	 mov r4,r0
 1072 000c FFF7FEFF 	 bl vPortEnterCritical
 1073 0010 A46B     	 ldr r4,[r4,#56]
 1074              	 
 1075 0012 FFF7FEFF 	 bl vPortExitCritical
 1076 0016 201C     	 mov r0,r4
 1077 0018 10BD     	 pop {r4,pc}
 1079              	 .section .text.uxQueueSpacesAvailable,"ax",%progbits
 1080              	 .align 1
 1081              	 .global uxQueueSpacesAvailable
 1082              	 .code 16
 1083              	 .thumb_func
 1085              	uxQueueSpacesAvailable:
 1086 0000 10B5     	 push {r4,lr}
 1087 0002 0028     	 cmp r0,#0
 1088 0004 01D1     	 bne .L273
 1089              	
 1090 0006 72B6     	 cpsid i
 1091              	
 1092              	 .code 16
 1093              	.L274:
 1094 0008 FEE7     	 b .L274
 1095              	.L273:
 1096 000a 041C     	 mov r4,r0
 1097 000c FFF7FEFF 	 bl vPortEnterCritical
 1098 0010 A26B     	 ldr r2,[r4,#56]
 1099 0012 E36B     	 ldr r3,[r4,#60]
 1100              	 
 1101 0014 9C1A     	 sub r4,r3,r2
 1102 0016 FFF7FEFF 	 bl vPortExitCritical
 1103 001a 201C     	 mov r0,r4
 1104 001c 10BD     	 pop {r4,pc}
 1106              	 .section .text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 1107              	 .align 1
 1108              	 .global uxQueueMessagesWaitingFromISR
 1109              	 .code 16
 1110              	 .thumb_func
 1112              	uxQueueMessagesWaitingFromISR:
 1113 0000 0028     	 cmp r0,#0
 1114 0002 01D1     	 bne .L276
 1115              	
 1116 0004 72B6     	 cpsid i
 1117              	
 1118              	 .code 16
 1119              	.L277:
 1120 0006 FEE7     	 b .L277
 1121              	.L276:
 1122 0008 806B     	 ldr r0,[r0,#56]
 1123              	 
 1124 000a 7047     	 bx lr
 1126              	 .section .text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 1127              	 .align 1
 1128              	 .global xQueueIsQueueEmptyFromISR
 1129              	 .code 16
 1130              	 .thumb_func
 1132              	xQueueIsQueueEmptyFromISR:
 1133 0000 0028     	 cmp r0,#0
 1134 0002 01D1     	 bne .L279
 1135              	
 1136 0004 72B6     	 cpsid i
 1137              	
 1138              	 .code 16
 1139              	.L280:
 1140 0006 FEE7     	 b .L280
 1141              	.L279:
 1142 0008 806B     	 ldr r0,[r0,#56]
 1143              	 
 1144 000a 4342     	 neg r3,r0
 1145 000c 5841     	 adc r0,r0,r3
 1146 000e 7047     	 bx lr
 1148              	 .section .text.xQueueIsQueueFullFromISR,"ax",%progbits
 1149              	 .align 1
 1150              	 .global xQueueIsQueueFullFromISR
 1151              	 .code 16
 1152              	 .thumb_func
 1154              	xQueueIsQueueFullFromISR:
 1155 0000 0028     	 cmp r0,#0
 1156 0002 01D1     	 bne .L282
 1157              	
 1158 0004 72B6     	 cpsid i
 1159              	
 1160              	 .code 16
 1161              	.L283:
 1162 0006 FEE7     	 b .L283
 1163              	.L282:
 1164 0008 836B     	 ldr r3,[r0,#56]
 1165 000a C06B     	 ldr r0,[r0,#60]
 1166              	 
 1167 000c 181A     	 sub r0,r3,r0
 1168 000e 4342     	 neg r3,r0
 1169 0010 5841     	 adc r0,r0,r3
 1170 0012 7047     	 bx lr
 1172              	 .section .text.vQueueAddToRegistry,"ax",%progbits
 1173              	 .align 1
 1174              	 .global vQueueAddToRegistry
 1175              	 .code 16
 1176              	 .thumb_func
 1178              	vQueueAddToRegistry:
 1179 0000 0023     	 mov r3,#0
 1180 0002 70B5     	 push {r4,r5,r6,lr}
 1181              	.L287:
 1182 0004 064C     	 ldr r4,.L288
 1183 0006 DD00     	 lsl r5,r3,#3
 1184 0008 2A19     	 add r2,r5,r4
 1185 000a 1668     	 ldr r6,[r2]
 1186 000c 002E     	 cmp r6,#0
 1187 000e 02D1     	 bne .L285
 1188 0010 2951     	 str r1,[r5,r4]
 1189 0012 5060     	 str r0,[r2,#4]
 1190 0014 02E0     	 b .L284
 1191              	.L285:
 1192 0016 0133     	 add r3,r3,#1
 1193 0018 082B     	 cmp r3,#8
 1194 001a F3D1     	 bne .L287
 1195              	.L284:
 1196              	 
 1197 001c 70BD     	 pop {r4,r5,r6,pc}
 1198              	.L289:
 1199 001e C046     	 .align 2
 1200              	.L288:
 1201 0020 00000000 	 .word xQueueRegistry
 1203              	 .section .text.pcQueueGetName,"ax",%progbits
 1204              	 .align 1
 1205              	 .global pcQueueGetName
 1206              	 .code 16
 1207              	 .thumb_func
 1209              	pcQueueGetName:
 1210 0000 0023     	 mov r3,#0
 1211 0002 10B5     	 push {r4,lr}
 1212              	.L293:
 1213 0004 064A     	 ldr r2,.L294
 1214 0006 D900     	 lsl r1,r3,#3
 1215 0008 8C18     	 add r4,r1,r2
 1216 000a 6468     	 ldr r4,[r4,#4]
 1217 000c 8442     	 cmp r4,r0
 1218 000e 01D1     	 bne .L291
 1219 0010 8858     	 ldr r0,[r1,r2]
 1220 0012 03E0     	 b .L292
 1221              	.L291:
 1222 0014 0133     	 add r3,r3,#1
 1223 0016 082B     	 cmp r3,#8
 1224 0018 F4D1     	 bne .L293
 1225 001a 0020     	 mov r0,#0
 1226              	.L292:
 1227              	 
 1228 001c 10BD     	 pop {r4,pc}
 1229              	.L295:
 1230 001e C046     	 .align 2
 1231              	.L294:
 1232 0020 00000000 	 .word xQueueRegistry
 1234              	 .section .text.vQueueUnregisterQueue,"ax",%progbits
 1235              	 .align 1
 1236              	 .global vQueueUnregisterQueue
 1237              	 .code 16
 1238              	 .thumb_func
 1240              	vQueueUnregisterQueue:
 1241 0000 0023     	 mov r3,#0
 1242 0002 30B5     	 push {r4,r5,lr}
 1243              	.L299:
 1244 0004 0649     	 ldr r1,.L300
 1245 0006 DC00     	 lsl r4,r3,#3
 1246 0008 6218     	 add r2,r4,r1
 1247 000a 5568     	 ldr r5,[r2,#4]
 1248 000c 8542     	 cmp r5,r0
 1249 000e 03D1     	 bne .L297
 1250 0010 0023     	 mov r3,#0
 1251 0012 6350     	 str r3,[r4,r1]
 1252 0014 5360     	 str r3,[r2,#4]
 1253 0016 02E0     	 b .L296
 1254              	.L297:
 1255 0018 0133     	 add r3,r3,#1
 1256 001a 082B     	 cmp r3,#8
 1257 001c F2D1     	 bne .L299
 1258              	.L296:
 1259              	 
 1260 001e 30BD     	 pop {r4,r5,pc}
 1261              	.L301:
 1262              	 .align 2
 1263              	.L300:
 1264 0020 00000000 	 .word xQueueRegistry
 1266              	 .section .text.vQueueDelete,"ax",%progbits
 1267              	 .align 1
 1268              	 .global vQueueDelete
 1269              	 .code 16
 1270              	 .thumb_func
 1272              	vQueueDelete:
 1273 0000 10B5     	 push {r4,lr}
 1274 0002 0028     	 cmp r0,#0
 1275 0004 01D1     	 bne .L303
 1276              	
 1277 0006 72B6     	 cpsid i
 1278              	
 1279              	 .code 16
 1280              	.L304:
 1281 0008 FEE7     	 b .L304
 1282              	.L303:
 1283 000a 041C     	 mov r4,r0
 1284 000c FFF7FEFF 	 bl vQueueUnregisterQueue
 1285 0010 201C     	 mov r0,r4
 1286 0012 FFF7FEFF 	 bl vPortFree
 1287              	 
 1288 0016 10BD     	 pop {r4,pc}
 1290              	 .section .text.xQueueCreateSet,"ax",%progbits
 1291              	 .align 1
 1292              	 .global xQueueCreateSet
 1293              	 .code 16
 1294              	 .thumb_func
 1296              	xQueueCreateSet:
 1297 0000 08B5     	 push {r3,lr}
 1298 0002 0421     	 mov r1,#4
 1299 0004 0022     	 mov r2,#0
 1300 0006 FFF7FEFF 	 bl xQueueGenericCreate
 1301              	 
 1302 000a 08BD     	 pop {r3,pc}
 1304              	 .section .text.xQueueAddToSet,"ax",%progbits
 1305              	 .align 1
 1306              	 .global xQueueAddToSet
 1307              	 .code 16
 1308              	 .thumb_func
 1310              	xQueueAddToSet:
 1311 0000 70B5     	 push {r4,r5,r6,lr}
 1312 0002 041C     	 mov r4,r0
 1313 0004 0025     	 mov r5,#0
 1314 0006 0E1C     	 mov r6,r1
 1315 0008 FFF7FEFF 	 bl vPortEnterCritical
 1316 000c A36C     	 ldr r3,[r4,#72]
 1317 000e AB42     	 cmp r3,r5
 1318 0010 04D1     	 bne .L307
 1319 0012 A36B     	 ldr r3,[r4,#56]
 1320 0014 AB42     	 cmp r3,r5
 1321 0016 01D1     	 bne .L307
 1322 0018 A664     	 str r6,[r4,#72]
 1323 001a 0135     	 add r5,r5,#1
 1324              	.L307:
 1325 001c FFF7FEFF 	 bl vPortExitCritical
 1326              	 
 1327 0020 281C     	 mov r0,r5
 1328 0022 70BD     	 pop {r4,r5,r6,pc}
 1330              	 .section .text.xQueueRemoveFromSet,"ax",%progbits
 1331              	 .align 1
 1332              	 .global xQueueRemoveFromSet
 1333              	 .code 16
 1334              	 .thumb_func
 1336              	xQueueRemoveFromSet:
 1337 0000 38B5     	 push {r3,r4,r5,lr}
 1338 0002 836C     	 ldr r3,[r0,#72]
 1339 0004 0025     	 mov r5,#0
 1340 0006 8B42     	 cmp r3,r1
 1341 0008 09D1     	 bne .L311
 1342 000a 836B     	 ldr r3,[r0,#56]
 1343 000c AB42     	 cmp r3,r5
 1344 000e 06D1     	 bne .L311
 1345 0010 041C     	 mov r4,r0
 1346 0012 FFF7FEFF 	 bl vPortEnterCritical
 1347 0016 A564     	 str r5,[r4,#72]
 1348 0018 FFF7FEFF 	 bl vPortExitCritical
 1349 001c 0135     	 add r5,r5,#1
 1350              	.L311:
 1351 001e 281C     	 mov r0,r5
 1352              	 
 1353 0020 38BD     	 pop {r3,r4,r5,pc}
 1355              	 .section .text.xQueueSelectFromSet,"ax",%progbits
 1356              	 .align 1
 1357              	 .global xQueueSelectFromSet
 1358              	 .code 16
 1359              	 .thumb_func
 1361              	xQueueSelectFromSet:
 1362 0000 0023     	 mov r3,#0
 1363 0002 07B5     	 push {r0,r1,r2,lr}
 1364 0004 0A1C     	 mov r2,r1
 1365 0006 01A9     	 add r1,sp,#4
 1366 0008 0193     	 str r3,[sp,#4]
 1367              	 
 1368 000a FFF7FEFF 	 bl xQueueGenericReceive
 1369 000e 0198     	 ldr r0,[sp,#4]
 1370 0010 0EBD     	 pop {r1,r2,r3,pc}
 1372              	 .section .text.xQueueSelectFromSetFromISR,"ax",%progbits
 1373              	 .align 1
 1374              	 .global xQueueSelectFromSetFromISR
 1375              	 .code 16
 1376              	 .thumb_func
 1378              	xQueueSelectFromSetFromISR:
 1379 0000 07B5     	 push {r0,r1,r2,lr}
 1380 0002 0022     	 mov r2,#0
 1381 0004 01A9     	 add r1,sp,#4
 1382 0006 0192     	 str r2,[sp,#4]
 1383              	 
 1384 0008 FFF7FEFF 	 bl xQueueReceiveFromISR
 1385 000c 0198     	 ldr r0,[sp,#4]
 1386 000e 0EBD     	 pop {r1,r2,r3,pc}
 1388              	 .comm xQueueRegistry,64,4
 1389              	 .ident "GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20141119 (release) [ARM/embedded-4_9-branch revision 218278]"
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
    {standard input}:15     .text.unlikely.prvCopyDataToQueue:00000000 $t
    {standard input}:19     .text.unlikely.prvCopyDataToQueue:00000000 prvCopyDataToQueue
    {standard input}:80     .text.prvNotifyQueueSetContainer:00000000 $t
    {standard input}:84     .text.prvNotifyQueueSetContainer:00000000 prvNotifyQueueSetContainer
    {standard input}:144    .text.unlikely.prvCopyDataFromQueue:00000000 $t
    {standard input}:148    .text.unlikely.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
    {standard input}:171    .text.prvUnlockQueue:00000000 $t
    {standard input}:175    .text.prvUnlockQueue:00000000 prvUnlockQueue
    {standard input}:242    .text.xQueueGenericReset:00000000 $t
    {standard input}:247    .text.xQueueGenericReset:00000000 xQueueGenericReset
    {standard input}:304    .text.xQueueGenericCreate:00000000 $t
    {standard input}:309    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
    {standard input}:355    .text.xQueueGenericSend:00000000 $t
    {standard input}:360    .text.xQueueGenericSend:00000000 xQueueGenericSend
    {standard input}:514    .text.xQueueCreateMutex:00000000 $t
    {standard input}:519    .text.xQueueCreateMutex:00000000 xQueueCreateMutex
    {standard input}:540    .text.xQueueGenericSendFromISR:00000000 $t
    {standard input}:545    .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
    {standard input}:645    .text.xQueueGiveFromISR:00000000 $t
    {standard input}:650    .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
    {standard input}:742    .text.xQueueGenericReceive:00000000 $t
    {standard input}:747    .text.xQueueGenericReceive:00000000 xQueueGenericReceive
    {standard input}:912    .text.xQueueReceiveFromISR:00000000 $t
    {standard input}:917    .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
    {standard input}:993    .text.xQueuePeekFromISR:00000000 $t
    {standard input}:998    .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
    {standard input}:1055   .text.uxQueueMessagesWaiting:00000000 $t
    {standard input}:1060   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
    {standard input}:1080   .text.uxQueueSpacesAvailable:00000000 $t
    {standard input}:1085   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
    {standard input}:1107   .text.uxQueueMessagesWaitingFromISR:00000000 $t
    {standard input}:1112   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
    {standard input}:1127   .text.xQueueIsQueueEmptyFromISR:00000000 $t
    {standard input}:1132   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
    {standard input}:1149   .text.xQueueIsQueueFullFromISR:00000000 $t
    {standard input}:1154   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
    {standard input}:1173   .text.vQueueAddToRegistry:00000000 $t
    {standard input}:1178   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
    {standard input}:1201   .text.vQueueAddToRegistry:00000020 $d
                            *COM*:00000040 xQueueRegistry
    {standard input}:1204   .text.pcQueueGetName:00000000 $t
    {standard input}:1209   .text.pcQueueGetName:00000000 pcQueueGetName
    {standard input}:1232   .text.pcQueueGetName:00000020 $d
    {standard input}:1235   .text.vQueueUnregisterQueue:00000000 $t
    {standard input}:1240   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
    {standard input}:1264   .text.vQueueUnregisterQueue:00000020 $d
    {standard input}:1267   .text.vQueueDelete:00000000 $t
    {standard input}:1272   .text.vQueueDelete:00000000 vQueueDelete
    {standard input}:1291   .text.xQueueCreateSet:00000000 $t
    {standard input}:1296   .text.xQueueCreateSet:00000000 xQueueCreateSet
    {standard input}:1305   .text.xQueueAddToSet:00000000 $t
    {standard input}:1310   .text.xQueueAddToSet:00000000 xQueueAddToSet
    {standard input}:1331   .text.xQueueRemoveFromSet:00000000 $t
    {standard input}:1336   .text.xQueueRemoveFromSet:00000000 xQueueRemoveFromSet
    {standard input}:1356   .text.xQueueSelectFromSet:00000000 $t
    {standard input}:1361   .text.xQueueSelectFromSet:00000000 xQueueSelectFromSet
    {standard input}:1373   .text.xQueueSelectFromSetFromISR:00000000 $t
    {standard input}:1378   .text.xQueueSelectFromSetFromISR:00000000 xQueueSelectFromSetFromISR

UNDEFINED SYMBOLS
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vPortEnterCritical
vTaskMissedYield
vPortExitCritical
vPortYield
vListInitialise
pvPortMalloc
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
ulSetInterruptMaskFromISR
vClearInterruptMaskFromISR
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
